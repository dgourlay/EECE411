import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class ClientImpl extends UnicastRemoteObject implements Client, Runnable {

	private static final long serialVersionUID = 1;

	static GUI gui;
	static MessageQueue _queue;
	private Server srv;

	private String chat_name, client_name, addr;
	private String cName;

	private boolean connected;

	public ClientImpl(String chat_name, String client_name, String addr)
			throws RemoteException {

		srv = null;
		this.chat_name = chat_name;
		this.client_name = client_name;
		this.addr = addr;

		cName = client_name;

		connected = false;

		// create a shared buffer where the GUI add the messages thet need to
		// be sent out by the main thread. The main thread stays in a loop
		// and when a new message shows up in the buffer it sends it out
		// to the chat server (using RMI)

		_queue = new MessageQueue();

		// instantiate the GUI - in a new thread
		javax.swing.SwingUtilities.invokeLater(new Runnable() {

			public void run() {
				gui = GUI.createAndShowGUI(_queue, cName + "'s Chat");
			}
		});

		// hack make sure the GUI instantioation is completed by the GUI thread
		// before the next call
		while (gui == null) {
			Thread.yield();
		}

		// calling the GUI method that updates the text area of the GUI
		// NOTE: you might want to call the same method when a new chat message
		// arrives
		gui.addToTextArea("Welcome to the EECE411-A2 Chat Program!");

		// gui.addToTextArea("Trying to connect to server...");
		// srv.register(this);
		connect(chat_name, client_name, addr);

	}

	public void connect(String chat_name, String client_name, String addr) {

		// String url = "rmi://localhost/Server";
		String url = "rmi://" + addr + "/" + chat_name;
		System.out.println("Connecting to: " + url);
		try {
			srv = (Server) Naming.lookup(url);
			srv.register(this);
		} catch (Exception e) {
			System.out
					.println("Client cannot register pointer back to self with server RMI");
			e.printStackTrace();
		}

		gui.addToTextArea("Trying to register to server...");
		while (!connected) {
			try {
				srv.register(this);
			} catch (Exception e) {

			}
		}
		gui.addToTextArea("Connected!");
	}

	public void setConnected(boolean value) throws RemoteException {
		this.connected = value;
	}

	public synchronized void receive(String s) throws RemoteException {
		System.out.println("Message Received: " + s);
		gui.addToTextArea(s);
	}

	public void run() {

		// The code below serves as an example to show how the shares message
		// between the GUI and the main thread.
		// You will probably want to replace the code below with code that sits
		// in a loop,
		// waits for new messages to be entered by the user, and sends them to
		// the
		// chat server (using an RMI call)
		//
		// In addition you may want to add code that
		// * connects to the chat server and provides an object for callbacks
		// (so
		// that the server has a way to send messages generated by other users)
		// * implement the callback object which is called by the server
		// remotely
		// and, in turn, updates the local GUI

		while (true) {

			String s;
			try {
				// wait until the user enters a new chat message
				s = _queue.dequeue();
			} catch (InterruptedException ie) {
				break;
			}

			try {

				if (connected) {
					// update the GUI with the message entered by the user
					gui.addToTextArea("Me:> " + s);
					srv.send_message(client_name + ": " + s, this);
					System.out.println("Sending message to server: " + s);
				} else {
					connect(chat_name, client_name, addr);
				}

			} catch (Exception e) {
				System.out.println("System error!");
				gui.addToTextArea("Error sending message to server, reconnecting.");
				connect(chat_name, client_name, addr);
			}

		} // end while loop

	}

	public static void main(String[] args) {
		String chat_name = null;
		String client_name = null;
		String addr = null;

		if (args.length == 3) {
			chat_name = args[0];
			client_name = args[1];
			addr = args[2];
		} else {
			System.out.println("Error, improper amount of arguements");
			System.exit(0);
		}

		try {
			new Thread(new ClientImpl(chat_name, client_name, addr)).start();
		} catch (Exception e) {
			System.out.println("Error starting client.");
			e.printStackTrace();
		}
	}
}
